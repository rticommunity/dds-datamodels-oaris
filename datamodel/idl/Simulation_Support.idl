// copyright 2013-2020 BAE Systems, Thales Group, Object Management Group Inc; 2013 Selex ES, DSTO, Atlas Elektronik, EADS Deutschland GmbH

#ifndef ORGOMGC4IDOMAIN_MODELSUBSYSTEM_DOMAINSIMULATION_SUPPORTDEFVAR
#define ORGOMGC4IDOMAIN_MODELSUBSYSTEM_DOMAINSIMULATION_SUPPORTDEFVAR

module org
{

  module omg
  {

    module c4i
    {

      module Domain_Model
      {

        module Subsystem_Domain
        {

          module Simulation_Support
          {

            @doc("A string type
                Identifies a single fault script.")
            typedef string<6> fault_script_id_type;

            @doc("Whether simulated mode is in operation")
            struct sim_mode_status_type
            {
              @doc("Flag to indicate if the simulation mode is active.")
              boolean sim_mode_active;
            };

            @doc("A request to change the simulation mode")
            struct start_stop_sim_mode_request_type
            {
              @doc("Flag to indicate if the simulation mode shall be started or stopped.")
              boolean start_simulation_mode;
            };

            @doc("A Simulation Management (SIMAN) request, sent from a Simulation Manager to
              request that one or more entities either
              a) pause their simulation session
              or
              b) stop their simulation session.")
            struct stop_freeze_session_request_type
            {
              @doc("Whether the entity or entities being stopped/frozen should continue to reflect
                values when stopped/frozen.")
              boolean reflect_values;
              @doc("Whether the entity or entities being stopped/frozen should continue to run their
                internal simulation clock when stopped/frozen.")
              boolean run_internal_simulation_clock;
              @doc("Whether the entity or entities being stopped/frozen should continue to update
                attributes when stopped/frozen.")
              boolean update_attributes;
            };

            @doc("A string type
                Typdef for bounded string type for attribute details_of_fault of class fault_script_type.")
            typedef string<200> fault_script_details_of_fault_type;

            @doc("A sequence type, to represent multiple values.")
            typedef sequence<fault_script_id_type, 100> fault_script_ids_script_id_type;

            @doc("This class represents a set of references to fault scripts")
            struct fault_script_ids_type
            {
              fault_script_ids_script_id_type script_id;
            };

            @doc("Definition of a fault script. The exact form of this is not yet defined, this
                class represents the essential attributes. It would probably be some form of
                string, perhaps an XML document.")
            struct fault_script_type
            {
              @doc("A description of the fault, such as is interpretable during the simulation")
              fault_script_details_of_fault_type details_of_fault;
            };

            @doc("A sequence type, to represent multiple values.")
            typedef sequence<fault_script_type, 100> fault_scripts_script_type;

            @doc("This class represents a set of fault scripts")
            struct fault_scripts_type
            {
              fault_scripts_script_type script;
            };

          };
        };
      };
    };
  };
};
#endif
