#ifndef TRACK_REPORTINGDEFVAR
#define TRACK_REPORTINGDEFVAR
#include "Coordinates_and_Positions.idl"
#include "Common_Types.idl"


// Version 1.1
module org {


  module omg {


    module c4i {


      module Domain_Model {


        module Sensor_Domain {


          module Track_Reporting {



            // The sensor tracking environment
            enum environment_type
            {
            	// AIR
            	AIR,
            	// LAND
            	LAND,
            	// SURFACE
            	SURFACE,
            	// SUBSURFACE
            	SUBSURFACE,
            	// SPACE
            	SPACE
            };
  




            // Type of track initiation
            enum initiation_mode_type
            {
            	// AUTOMATIC
            	AUTOMATIC,
            	// EXTERNAL_REQUEST
            	EXTERNAL_REQUEST
            };
  




            // The recognition type indicates the type of the real-world physical object being
            // tracked.
            //    The numeric value is used to map to a system or implementation specific
            // taxonomy of real-world physical objects that are of tactical interest.
            typedef unsigned short recognition_type;
  




            // A sequence type, to represent multiple values. Note: variable length sequence.
            typedef sequence<long, 256> sensor_track_based_on_id_type;
  




            // a simple union type, to represent an optional value
            union sensor_track_covariance_matrix_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::covariance_matrix_type value;
            };
  




            // a simple union type, to represent an optional value
            union sensor_track_environment_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Sensor_Domain::Track_Reporting::environment_type value;
            };
  




            // Sensor Track Identification
            typedef unsigned long sensor_track_id_type;
  




            // a simple union type, to represent an optional value
            union sensor_track_initiation_mode_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Sensor_Domain::Track_Reporting::initiation_mode_type value;
            };
  




            // a simple union type, to represent an optional value
            union sensor_track_max_range_limit_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::range_coordinate_type value;
            };
  




            // a simple union type, to represent an optional value
            union sensor_track_position_accuracy_coordinate_system_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::coordinate_specification_type value;
            };
  




            // a simple union type, to represent an optional value
            union sensor_track_position_accuracy_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::position_accuracy_coordinate_type value;
            };
  




            // a simple union type, to represent an optional value
            union sensor_track_sensor_track_pre_identification_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Common_Types::identity_type value;
            };
  




            // a simple union type, to represent an optional value
            union sensor_track_sensor_track_pre_recognition_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Sensor_Domain::Track_Reporting::recognition_type value;
            };
  




            // a simple union type, to represent an optional value
            union sensor_track_velocity_accuracy_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::velocity_accuracy_coordinate_type value;
            };
  




            // a simple union type, to represent an optional value
            union sensor_track_velocity_accuracy_coordinate_system_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::coordinate_specification_type value;
            };
  




            // The detection lifecycle phase of the track
            enum track_phase_type
            {
            	// DEAD_RECKONED
            	DEAD_RECKONED,
            	// Delete enumeration not used for DDS; dispose topic instance instead.
            	NOT_USED,
            	// LOST
            	LOST,
            	// TRACKED
            	TRACKED
            };
  




            // Encapsulation of a sensor track
            struct sensor_track_type
            {
            	// Additional, vendor-specific information
            	org::omg::c4i::Domain_Model::Common_Types::anonymous_blob_type additional_information;
            	// The number of elements in the covariance matrix is dependent on the sensor.
            	// When present, the position_accuracy and velocity_accuracy attributes should not
            	// be present.
            	sensor_track_covariance_matrix_type covariance_matrix;
            	// Environment of the track (air, surface etc)
            	sensor_track_environment_type environment;
            	// Initiation mode of track (automatic or externally initiatied)
            	sensor_track_initiation_mode_type initiation_mode;
            	// Indication whether or not a track is jamming.
            	boolean jammer_indication;
            	// Maximal range for a bearing track
            	sensor_track_max_range_limit_type max_range_limit;
            	// The location of the track as calculated in the sensor's chosen coordinate
            	// system at the stated time.
            	org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::position_coordinate_type position;
            	// The sensor's stated accuracy for its calculated position.
            	//      When present, the covariance_matrix attribute should not be present.
            	sensor_track_position_accuracy_type position_accuracy;
            	// The coordinate system chosen by the sensor for reporting accuracy.
            	sensor_track_position_accuracy_coordinate_system_type position_accuracy_coordinate_system;
            	// The coordinate system chosen by the sensor.
            	org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::coordinate_specification_type position_coordinate_system;
            	// The sensor's unique identifying reference for the track. Sensors may reuse
            	// identifiers after they have deleted the corresponding track. The scheme used
            	// for identifier reallocation is system dependent.
#ifdef DDS_XTYPES
            	@Key sensor_track_id_type sensor_track_id;
#else
            	sensor_track_id_type sensor_track_id;
#endif
            	// Identification information for the sensor track (if available)
            	sensor_track_sensor_track_pre_identification_type sensor_track_pre_identification;
            	// Recognition information for the sensor track (if available)
            	sensor_track_sensor_track_pre_recognition_type sensor_track_pre_recognition;
            	// Whether the CMS should process the track as having been synthetically generated
            	// as opposed to corresponding to an actual detection in the real world.
            	boolean simulated;
            	// The time at which the information in this object is valid, in particular its
            	// position.
            	org::omg::c4i::Domain_Model::Common_Types::time_type time_of_information;
            	// The time at which the sensor first determined the existence of this track.
            	org::omg::c4i::Domain_Model::Common_Types::time_type time_of_initiation;
            	// Track phase (e.g. TRACKED, DELETED, LOST)
            	track_phase_type track_phase;
            	// The velocity of the track as calculated in the sensor's chosen coordinate
            	// system at the stated time.
            	org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::velocity_coordinate_type velocity;
            	// The sensor's stated accuracy for its calculated velocity.
            	//      When present, the covariance_matrix attribute should not be present.
            	sensor_track_velocity_accuracy_type velocity_accuracy;
            	// The coordinate system chosen by the sensor for reporting accuracy.
            	sensor_track_velocity_accuracy_coordinate_system_type velocity_accuracy_coordinate_system;
            	// The coordinate system chosen by the sensor.
            	org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::coordinate_specification_type velocity_coordinate_system;
            	sensor_track_based_on_id_type based_on_id;
            // Indicates which subsystem published the data or is intended to read it as a subscriber
#ifdef DDS_XTYPES
            @Key org::omg::c4i::Domain_Model::Common_Types::subsystem_id_type subsystem_id;
#else
            org::omg::c4i::Domain_Model::Common_Types::subsystem_id_type subsystem_id;
#endif
            };
            // Topic type for operation write_sensor_track. This service allows the CMS to
            // obtain an overview of (real and/or simulated) air / land / space / surface
            // objects observed or simulated. Information may cover all aspects of a track
            // such as kinematic and amplifying information.
            //      The service does not cover:
            //      <ul>
            //      	<li>additional track information provision dedicated for engagement
            // support,</li>
            //      	<li>special search functions such as cued search, volume search and
            // horizon search (however, if such a search function is initiated by means of
            // another service, the tracks shall be provided by this service),</li>
            //      </ul>
            //      Although the service focuses on radar as an example of a sensor, the
            // service also applies to other sensors, like IR/EO sensors and ECM/ESM sensors.
            // 
            //      The actor is the Combat Management System.
            // 
            //      The service starts when:
            //      <ul>
            //      	<li>if the service does provide registration capabilities: the service
            // "Register interest" has completed successfully, or</li>
            //      	<li>if the service does not provide registration capabilities: the
            // service "Provide subsystem services" has completed successfully for this
            // service.</li>
            //      </ul>
            // 
            //      The sensor provides, periodically or on event, a set of sensor tracks
            // observed by the sensor. These may be sensor point or bearing tracks. The set of
            // sensor tracks includes:
            //      <ul>
            //      	<li>Track updates of existing and new sensor tracks. These are provided
            // when there are sufficient measurements (e.g. plots) in the last observation
            // cycle, which may be associated with the sensor track.</li>
            //      	<li>Dead-reckoned tracks. These are sensor track updates for which in the
            // last observation cycle there are no measurements that may be associated with
            // the sensor track. For dead-reckoned tracks, the sensor track information (e.g.
            // kinematics) is extrapolated. The dead-reckoned tracks may become"normal" tracks
            // again if, in the next scan, there are measurement(s) that may be associated
            // with the track. Alternatively, dead-reckoned tracks (after n unsuccessful
            // scans) may become lost tracks.</li>
            //      	<li>Lost tracks. These are sensor track updates that are reported once,
            // if in the last n scans, there are no measurements that may be associated with
            // the sensor track. The value of n is typically a sensor parameter that is
            // managed by the service "Manage subsystem parameters".</li>
            //      </ul>
            //      Some sensors are not capable of reporting lost and/or dead-reckoned tracks.
            // 
            //      The sensor may also provide single sensor tracks periodically or on event.
            // 
            // 
            //      The service ends with success when:
            //      <ul>
            //      	<li>if the service does provide registration capabilities: the service
            // "Register interest" has completed successfully for a deregistration request,
            // or</li>
            //      	<li>if the service does not  provide registration capabilities: the
            // sensor is shutdown using service  "Shut down".</li>
            //      </ul>. The method represents a write of a single sensor track (air, land,
            // space or surface) to the CMS.
            //      The write may be periodic or not.
#pragma keylist sensor_track_type sensor_track_id subsystem_id
  




            // A sequence type, to represent multiple values. Note: variable length sequence.
            typedef sequence<sensor_track_type, 1000> sensor_track_set_element_type;
  




            // A set of sensor tracks (to enable batch reporting)
            struct sensor_track_set_type
            {
            	sensor_track_set_element_type element;
            // Indicates which subsystem published the data or is intended to read it as a subscriber
#ifdef DDS_XTYPES
            @Key org::omg::c4i::Domain_Model::Common_Types::subsystem_id_type subsystem_id;
#else
            org::omg::c4i::Domain_Model::Common_Types::subsystem_id_type subsystem_id;
#endif
            };
            // Topic type for operation write_sensor_track_set. This service allows the CMS to
            // obtain an overview of (real and/or simulated) air / land / space / surface
            // objects observed or simulated. Information may cover all aspects of a track
            // such as kinematic and amplifying information.
            //      The service does not cover:
            //      <ul>
            //      	<li>additional track information provision dedicated for engagement
            // support,</li>
            //      	<li>special search functions such as cued search, volume search and
            // horizon search (however, if such a search function is initiated by means of
            // another service, the tracks shall be provided by this service),</li>
            //      </ul>
            //      Although the service focuses on radar as an example of a sensor, the
            // service also applies to other sensors, like IR/EO sensors and ECM/ESM sensors.
            // 
            //      The actor is the Combat Management System.
            // 
            //      The service starts when:
            //      <ul>
            //      	<li>if the service does provide registration capabilities: the service
            // "Register interest" has completed successfully, or</li>
            //      	<li>if the service does not provide registration capabilities: the
            // service "Provide subsystem services" has completed successfully for this
            // service.</li>
            //      </ul>
            // 
            //      The sensor provides, periodically or on event, a set of sensor tracks
            // observed by the sensor. These may be sensor point or bearing tracks. The set of
            // sensor tracks includes:
            //      <ul>
            //      	<li>Track updates of existing and new sensor tracks. These are provided
            // when there are sufficient measurements (e.g. plots) in the last observation
            // cycle, which may be associated with the sensor track.</li>
            //      	<li>Dead-reckoned tracks. These are sensor track updates for which in the
            // last observation cycle there are no measurements that may be associated with
            // the sensor track. For dead-reckoned tracks, the sensor track information (e.g.
            // kinematics) is extrapolated. The dead-reckoned tracks may become"normal" tracks
            // again if, in the next scan, there are measurement(s) that may be associated
            // with the track. Alternatively, dead-reckoned tracks (after n unsuccessful
            // scans) may become lost tracks.</li>
            //      	<li>Lost tracks. These are sensor track updates that are reported once,
            // if in the last n scans, there are no measurements that may be associated with
            // the sensor track. The value of n is typically a sensor parameter that is
            // managed by the service "Manage subsystem parameters".</li>
            //      </ul>
            //      Some sensors are not capable of reporting lost and/or dead-reckoned tracks.
            // 
            //      The sensor may also provide single sensor tracks periodically or on event.
            // 
            // 
            //      The service ends with success when:
            //      <ul>
            //      	<li>if the service does provide registration capabilities: the service
            // "Register interest" has completed successfully for a deregistration request,
            // or</li>
            //      	<li>if the service does not  provide registration capabilities: the
            // sensor is shutdown using service  "Shut down".</li>
            //      </ul>. The method represents a single write of a set of sensor tracks to
            // the CMS. The write may be:
            //      - periodic or not
            //      - include all tracks observed during a sensor scan
            //      - be an update of just one track (a set of 1) if this is how the sensor
            // works
#pragma keylist sensor_track_set_type  subsystem_id
  



          };
        };
      };
    };
  };
};
#endif