#ifndef TRACK_REPORTINGDEFVAR
#define TRACK_REPORTINGDEFVAR
#include "Coordinates_and_Positions.idl"

#include "Common_Types.idl"


module org {


  module omg {


    module c4i {


      module Domain_Model {


        module Sensor_Domain {


          module Track_Reporting {



            // Version 1.0
            // The sensor tracking environment
            enum environment_type
            {
            	AIR,
            	LAND,
            	SURFACE,
            	SUBSURFACE,
            	SPACE
            };
  




            // Version 1.0
            // Type of track initiation
            enum initiation_mode_type
            {
            	// Automatic track initiation mode
            	AUTOMATIC,
            	// Track initation on external request (e.g. from CMS)
            	EXTERNAL_REQUEST
            };
  




            // Version 1.0
            // The recognition_type indicates the type of the tracked object.
            //    The type of the recognition_type is 'short'. This short number is mapped to
            // a recognition_type. 
            typedef unsigned short recognition_type;
  




            // Version 1.0
            // A sequence type, to represent multiple values. Note: variable length sequence,
            // which should contain at least one instance.
            typedef sequence<long, 256> sensor_track_based_on_id_type;
  




            // Version 1.0
            // a simple union type, to represent an optional value
            union sensor_track_covariance_matrix_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::covariance_matrix_type value;
            };
  




            // Version 1.0
            // a simple union type, to represent an optional value
            union sensor_track_environment_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Sensor_Domain::Track_Reporting::environment_type value;
            };
  




            // Version 1.0
            // Sensor Track Identification
            typedef unsigned long sensor_track_id_type;
  




            // Version 1.0
            // a simple union type, to represent an optional value
            union sensor_track_initiation_mode_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Sensor_Domain::Track_Reporting::initiation_mode_type value;
            };
  




            // Version 1.0
            // a simple union type, to represent an optional value
            union sensor_track_max_range_limit_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::range_coordinate_type value;
            };
  




            // Version 1.0
            // a simple union type, to represent an optional value
            union sensor_track_position_accuracy_coordinate_system_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::coordinate_specification_type value;
            };
  




            // Version 1.0
            // a simple union type, to represent an optional value
            union sensor_track_position_accuracy_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::position_accuracy_coordinate_type value;
            };
  




            // Version 1.0
            // a simple union type, to represent an optional value
            union sensor_track_sensor_track_pre_identification_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Common_Types::identity_type value;
            };
  




            // Version 1.0
            // a simple union type, to represent an optional value
            union sensor_track_sensor_track_pre_recognition_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Sensor_Domain::Track_Reporting::recognition_type value;
            };
  




            // Version 1.0
            // The detection lifecycle phase of the track
            enum track_phase_type
            {
            	// Track provided based on extrapolated position (dead-reckoned)
            	DEAD_RECKONED,
            	// Track has been deleted. 
            	DELETED,
            	// Track has been lost
            	LOST,
            	// Regular update of new and existing track
            	TRACKED
            };
  




            // Version 1.0
            // a simple union type, to represent an optional value
            union sensor_track_velocity_accuracy_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::velocity_accuracy_coordinate_type value;
            };
  




            // Version 1.0
            // a simple union type, to represent an optional value
            union sensor_track_velocity_accuracy_coordinate_system_type switch (boolean)
            {
            	// the value when present
            	case TRUE : org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::coordinate_specification_type value;
            };
  




            // Version 1.0
            // Encapsulation of a sensor track
            struct sensor_track_type
            {
            	// Additional, vendor-specific information
            	org::omg::c4i::Domain_Model::Common_Types::anonymous_blob_type additional_information;
            	// * optional *
            	//      The number of elements in the covariance matrix is dependent on the sensor.
            	sensor_track_covariance_matrix_type covariance_matrix;
            	// Environment of the track (air, surface etc)
            	sensor_track_environment_type environment;
            	// Initiation mode of track (automatic or externally initiatied)
            	sensor_track_initiation_mode_type initiation_mode;
            	// Indication whether or not a track is jamming.
            	boolean jammer_indication;
            	// Maximal range for a bearing track
            	sensor_track_max_range_limit_type max_range_limit;
            	org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::position_coordinate_type position;
            	// * optional *
            	sensor_track_position_accuracy_type position_accuracy;
            	// * optional *
            	sensor_track_position_accuracy_coordinate_system_type position_accuracy_coordinate_system;
            	org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::coordinate_specification_type position_coordinate_system;
#ifdef DDS_XTYPES
            	@Key sensor_track_id_type sensor_track_id;
#else
            	sensor_track_id_type sensor_track_id;
#endif
            	// Identification information for the sensor track (if available)
            	sensor_track_sensor_track_pre_identification_type sensor_track_pre_identification;
            	// Recognition information for the sensor track (if available)
            	sensor_track_sensor_track_pre_recognition_type sensor_track_pre_recognition;
            	boolean simulated;
            	org::omg::c4i::Domain_Model::Common_Types::time_type time_of_information;
            	org::omg::c4i::Domain_Model::Common_Types::time_type time_of_initiation;
            	// Track phase (e.g. TRACKED, DELETED, LOST)
            	track_phase_type track_phase;
            	org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::velocity_coordinate_type velocity;
            	// * optional *
            	sensor_track_velocity_accuracy_type velocity_accuracy;
            	// * optional *
            	sensor_track_velocity_accuracy_coordinate_system_type velocity_accuracy_coordinate_system;
            	org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::coordinate_specification_type velocity_coordinate_system;
            	sensor_track_based_on_id_type based_on_id;
            };
            // Topic type for operation write_sensor_track. This service allows the CMS to
            // obtain an overview of (real and/or simulated) air / land / space / surface
            // objects observed or simulated. Information may cover all aspects of a track
            // such as kinematic and amplifying information.
            //      The service does not cover:
            //      <ul>
            //      	<li>additional track information provision dedicated for engagement
            // support,</li>
            //      	<li>special search functions such as cued search, volume search and
            // horizon search (however, if such a search function is initiated by means of
            // another service, the tracks shall be provided by this service),</li>
            //      </ul>
            //      Although the service focuses on radar as an example of a sensor, the
            // service also applies to other sensors, like IR/EO sensors and ECM/ESM sensors.
            // 
            //      The actor is the Combat Management System.
            // 
            //      The service starts when:
            //      <ul>
            //      	<li>if the service does provide registration capabilities: the service
            // "Register interest" has completed successfully, or</li>
            //      	<li>if the service does not provide registration capabilities: the
            // service "Provide subsystem services" has completed successfully for this
            // service.</li>
            //      </ul>
            // 
            //      The sensor provides, periodically or on event, a set of sensor tracks
            // observed by the sensor. These may be sensor point or bearing tracks. The set of
            // sensor tracks includes:
            //      <ul>
            //      	<li>Track updates of existing and new sensor tracks. These are provided
            // when there are sufficient measurements (e.g. plots) in the last observation
            // cycle, which may be associated with the sensor track.</li>
            //      	<li>Dead-reckoned tracks. These are sensor track updates for which in the
            // last observation cycle there are no measurements that may be associated with
            // the sensor track. For dead-reckoned tracks, the sensor track information (e.g.
            // kinematics) is extrapolated. The dead-reckoned tracks may become"normal" tracks
            // again if, in the next scan, there are measurement(s) that may be associated
            // with the track. Alternatively, dead-reckoned tracks (after n unsuccessful
            // scans) may become lost tracks.</li>
            //      	<li>Lost tracks. These are sensor track updates that are reported once,
            // if in the last n scans, there are no measurements that may be associated with
            // the sensor track. The value of n is typically a sensor parameter that is
            // managed by the service "Manage subsystem parameters".</li>
            //      </ul>
            //      Some sensors are not capable of reporting lost and/or dead-reckoned tracks.
            // 
            //      The sensor may also provide single sensor tracks periodically or on event.
            // 
            // 
            //      The service ends with success when:
            //      <ul>
            //      	<li>if the service does provide registration capabilities: the service
            // "Register interest" has completed successfully for a deregistration request,
            // or</li>
            //      	<li>if the service does not  provide registration capabilities: the
            // sensor is shutdown using service  "Shut down".</li>
            //      </ul>. The method represents a write of a single sensor track (air, land,
            // space or surface) to the CMS.
            //      The write may be periodic or not.
#pragma keylist sensor_track_type sensor_track_id
  




            // Version 1.0
            // A sequence type, to represent multiple values. Note: variable length sequence.
            typedef sequence<sensor_track_type, 1000> sensor_track_set_element_type;
  




            // Version 1.0
            // A set of sensor tracks (to enable batch reporting)
            struct sensor_track_set_type
            {
            	sensor_track_set_element_type element;
            };
            // Topic type for operation write_sensor_track_set. This service allows the CMS to
            // obtain an overview of (real and/or simulated) air / land / space / surface
            // objects observed or simulated. Information may cover all aspects of a track
            // such as kinematic and amplifying information.
            //      The service does not cover:
            //      <ul>
            //      	<li>additional track information provision dedicated for engagement
            // support,</li>
            //      	<li>special search functions such as cued search, volume search and
            // horizon search (however, if such a search function is initiated by means of
            // another service, the tracks shall be provided by this service),</li>
            //      </ul>
            //      Although the service focuses on radar as an example of a sensor, the
            // service also applies to other sensors, like IR/EO sensors and ECM/ESM sensors.
            // 
            //      The actor is the Combat Management System.
            // 
            //      The service starts when:
            //      <ul>
            //      	<li>if the service does provide registration capabilities: the service
            // "Register interest" has completed successfully, or</li>
            //      	<li>if the service does not provide registration capabilities: the
            // service "Provide subsystem services" has completed successfully for this
            // service.</li>
            //      </ul>
            // 
            //      The sensor provides, periodically or on event, a set of sensor tracks
            // observed by the sensor. These may be sensor point or bearing tracks. The set of
            // sensor tracks includes:
            //      <ul>
            //      	<li>Track updates of existing and new sensor tracks. These are provided
            // when there are sufficient measurements (e.g. plots) in the last observation
            // cycle, which may be associated with the sensor track.</li>
            //      	<li>Dead-reckoned tracks. These are sensor track updates for which in the
            // last observation cycle there are no measurements that may be associated with
            // the sensor track. For dead-reckoned tracks, the sensor track information (e.g.
            // kinematics) is extrapolated. The dead-reckoned tracks may become"normal" tracks
            // again if, in the next scan, there are measurement(s) that may be associated
            // with the track. Alternatively, dead-reckoned tracks (after n unsuccessful
            // scans) may become lost tracks.</li>
            //      	<li>Lost tracks. These are sensor track updates that are reported once,
            // if in the last n scans, there are no measurements that may be associated with
            // the sensor track. The value of n is typically a sensor parameter that is
            // managed by the service "Manage subsystem parameters".</li>
            //      </ul>
            //      Some sensors are not capable of reporting lost and/or dead-reckoned tracks.
            // 
            //      The sensor may also provide single sensor tracks periodically or on event.
            // 
            // 
            //      The service ends with success when:
            //      <ul>
            //      	<li>if the service does provide registration capabilities: the service
            // "Register interest" has completed successfully for a deregistration request,
            // or</li>
            //      	<li>if the service does not  provide registration capabilities: the
            // sensor is shutdown using service  "Shut down".</li>
            //      </ul>. The method represents a single write of a set of sensor tracks to
            // the CMS. The write may be:
            //      - periodic or not
            //      - include all tracks observed during a sensor scan
            //      - be an update of just one track (a set of 1) if this is how the sensor
            // works
#pragma keylist sensor_track_set_type 
  



          };
        };
      };
    };
  };
};
#endif