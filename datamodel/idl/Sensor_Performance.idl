// copyright 2013-2020 BAE Systems, Thales Group, Object Management Group Inc; 2013 Selex ES, DSTO, Atlas Elektronik, EADS Deutschland GmbH

#ifndef ORGOMGC4IDOMAIN_MODELSENSOR_DOMAINSENSOR_PERFORMANCEDEFVAR
#define ORGOMGC4IDOMAIN_MODELSENSOR_DOMAINSENSOR_PERFORMANCEDEFVAR
#include "Common_Types.idl"
#include "Coordinates_and_Positions.idl"
#include "Shape_Model.idl"
#include "Subsystem_Control.idl"

module org
{

  module omg
  {

    module c4i
    {

      module Domain_Model
      {

        module Sensor_Domain
        {

          module Sensor_Performance
          {

            @doc("Enumeration of the types of interferers that are known about.")
            enum interferer_kind
            {
              @doc("Interference from active noise.")
              ACTIVE_NOISE,
              @doc("Interference from clutter.")
              CLUTTER,
              @doc("Interference from a jammer, which is self screening.")
              SELF_SCREENING_JAMMER,
              @doc("Interference from a stand-off jammer")
              STANDOFF_JAMMER,
              @doc("Interference from a strobe jammer.")
              STROBE,
              @doc("The interference source is of a different type to the other declared interference
                kinds")
              OTHER_TYPE,
              @doc("The interference source could not be classified by the sensor subsystem.")
              NO_STATEMENT
            };

            @doc("Target strength (Effective Radiated Power - ERP) of a jammer. The precise
                semantics of this type are sensor subsystem specific, but a typical
                interpretation is as a signal to noise ratio in dB.")
            typedef unsigned short jamming_magnitude_type;

            @doc("Defined as a signal excess in dB above noise floor for a nominal 0dB target
                strength, when assessing nominal performance or for the jammer when providing
                jammer assessment.")
            typedef float performance_type;

            @doc("A sequence type, to represent multiple values.")
            typedef sequence<org::omg::c4i::Domain_Model::Common_Types::frequency_band_type> interferer_affected_bands_type;

            @doc("A sequence type, to represent multiple values.")
            typedef sequence<org::omg::c4i::Domain_Model::Common_Types::frequency_band_type> performance_assessment_parameters_frequency_bands_type;

            @doc("Value of performance in a volume of space. This is given as a signal excess in dB
                above noise floor for a nominal 0dB target strength.  For a current performance
                report, this noise floor shall include clutter and jamming. These are not
                included in a nominal performance report.")
            struct perfomance_bin_type
            {
              @doc("The start of the bin in range.")
              org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::range_coordinate_type start_range;
              @doc("The end of the bin in range.")
              org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::range_coordinate_type end_range;
              @doc("The assessed level of performance.
                If no value present, there is no performance data available for this bin.")
              @optional performance_type value;
            };

            @doc("A sequence type, to represent multiple values.")
            typedef sequence<perfomance_bin_type> performance_beam_bin_type;

            @doc("Set of performance values for a line of points in space. Each value applies to a
                volume whose boundaries may be inferred from the numbers of bins and the min and
                max values in the report.")
            struct performance_beam_type
            {
              @doc("The start of the beam in elevation (positive orientation).")
              org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::elevation_coordinate_type start_elevation;
              @doc("The end of the beam in elevation (positive orientation).")
              org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::elevation_coordinate_type end_elevation;
              @doc("The list of 'bins' in a beam of the performance assessment")
              performance_beam_bin_type bin;
            };

            @doc("A single source of interference.")
            struct interferer_type
            {
              @doc("Time to which the performance report applies.")
              org::omg::c4i::Domain_Model::Common_Types::time_type timestamp;
              @doc("The Effective Radiated Power (ERP) of the source of interference. This is an
                optional attribute, which may not all sensors may be able to calculate.")
              @optional jamming_magnitude_type magnitude;
              @doc("A list of frequency bands which are effected by the source of interference.")
              interferer_affected_bands_type affected_bands;
              @doc("The source position of the interference. This is an optional attribute that not
                all sensors may be able to calculate.")
              @optional org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::position_coordinate_type position;
              @doc("A classification of the interference source.")
              interferer_kind kind;
              @doc("The volume in space, which the interference source is affecting. This is an
                optional attribute, which may not all sensors may be able to calculate.")
              @optional org::omg::c4i::Domain_Model::Common_Types::Shape_Model::general_polar_volume_type affected_volume;
              @doc("Specifies the coordinate system used to define the interferer.")
              org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::coordinate_specification_type position_coordinate_specification;
            };

            @doc("A sequence type, to represent multiple values.")
            typedef sequence<performance_beam_type> performance_sector_beam_type;

            @doc("A sequence type, to represent multiple values.")
            typedef sequence<interferer_type> interference_report_interferers_type;

            @doc("The report on interference
              Provides an updated set of interference reports to the CMS.
              This describes the process whereby the subsystem provides a set of reports on
              sources of interference, including jammers. The data shall, therefore, in
              general, be non-real-time but should, where appropriate, be time-tagged and shall
              be updated when any observed data changes.
              The sensor need not be radiating but shall at least be receiving. The subsystem
              VOI (volume of interest) or other filter mechanisms might be supplied in a
              request to the subsystem
              For a nominal effect assessment, the request might contain data on number,
              strength/Effective Radiated Power (ERP), type and deployment of jammers and other
              interferers affecting radar operations. For example, for each interferer
              <ul>
               <li>Sensor time-tag</li>
               <li>Interference type - active noise, self-screening jammer, standoff jammer
              etc</li>
               <li>Strength/Effective Radiated Power</li>
               <li>Locations - strobes etc.</li>
              </ul>
              <ul>
               <li>Affected sectors</li>
               <li>Frequency bands affected</li>
              </ul>
              Set of interferer objects in a report.")
            struct interference_report_type
            {
              @doc("The interference sources, which are described by the report.")
              interference_report_interferers_type interferers;

              @doc("Indicates which subsystem published the data or is intended to read it as a
                subscriber")
              @key org::omg::c4i::Domain_Model::Common_Types::subsystem_id_type subsystem_id;
            };

            @doc("A set of performance values for a sector of azimuth [start_azimuth..end_azimuth].")
            struct performance_sector_type
            {
              @doc("The start of the sector of azimuth (positive orientation).")
              org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::azimuth_coordinate_type start_azimuth;
              @doc("The end of the sector of azimuth (positive orientation).")
              org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::azimuth_coordinate_type end_azimuth;
              @doc("The list of beams in the sector of the performance report")
              performance_sector_beam_type beam;
            };

            @doc("A sequence type, to represent multiple values.")
            typedef sequence<performance_sector_type> performance_band_sector_type;

            @doc("The parameters of a performance assessment request consists of an overall volume
                of interest and a specification of a number of 'bins' into which that volume is
                to be sub-divided. In response the sensor assess performance for each 'bin'.
                The coordinate origin for the request is the SENSOR_REFERENCE_POINT as defined in
                coordinate_origin_type.")
            struct performance_assessment_parameters_type
            {
              @doc("Number of azimuth bins that the CMS would like in the performance report. The
                subsystem should try to honour this request but does not have to.")
              unsigned short azimuth_bin_count;
              @doc("Number of range bins that the CMS would like in the report. The subsystem should
                try to honour this request but does not have to.")
              unsigned short range_bin_count;
              @doc("The number of elevation bins that the CMS would like in the report. The
                subsystem should try to honour this request but does not have to.")
              unsigned short elevation_bin_count;
              @doc("Defines the start of the arc of azimuth (positive orientation) of the volume in
                which the sensor's performance is to be assessed.")
              @optional org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::azimuth_coordinate_type start_azimuth;
              @doc("Defines the end of the arc of azimuth (positive orientation) of the volume in
                which the sensor's performance is to be assessed.")
              @optional org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::azimuth_coordinate_type end_azimuth;
              @doc("Defines the start of the arc of elevation (positive orientation) of the volume in
                which the sensor's performance is to be assessed.")
              @optional org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::elevation_coordinate_type start_elevation;
              @doc("Defines the end of the arc of elevation (positive orientation) of the volume in
                which the sensor's performance is to be assessed.")
              @optional org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::elevation_coordinate_type end_elevation;
              @doc("Defines the minimum range of the volume in which the sensor's performance is to
                be assessed.")
              @optional org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::range_coordinate_type min_range;
              @doc("Defines the maximum range of the volume in which the sensor's performance is to
                be assessed.")
              @optional org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::range_coordinate_type max_range;
              @doc("The set of frequency bands to assess the performance for. Where no bands are
                specified the performance is assessed for the sensor in general in the specified
                operational mode.")
              performance_assessment_parameters_frequency_bands_type frequency_bands;
              @doc("The performance assessment is to be in the context of this
                operational mode of the sensor subsystem.")
              org::omg::c4i::Domain_Model::Subsystem_Domain::Subsystem_Control::operational_mode_type applicable_mode;
              @doc("The orientation of the polar coordinates used in this class. Note that the origin
                is always the sensor reference point and that the coordinate system is always
                polar.")
              org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::coordinate_orientation_type coordinate_orientation;
            };

            @doc("The performance reported in a particular band (or in general)")
            struct performance_band_type
            {
              @doc("The specific band to which the contained performance assessments refers ")
              @optional org::omg::c4i::Domain_Model::Common_Types::frequency_band_type frequency_band;
              @doc("The list of sectors in the performance assessment")
              performance_band_sector_type sector;
            };

            @doc("A sequence type, to represent multiple values.")
            typedef sequence<performance_band_type> performance_assessment_report_band_type;

            @doc("Contains the results of a performance assessment.")
            struct performance_assessment_report_type
            {
              @doc("The time of validity of the performance assessment.")
              org::omg::c4i::Domain_Model::Common_Types::time_type time_of_report;
              @doc("The actual dimensions of the assessment that is performed are reported with the
                result.")
              performance_assessment_parameters_type assessment_dimensions;
              @doc("The performance assessment for the band (or the sensor in general)")
              performance_assessment_report_band_type band;
            };

          };
        };
      };
    };
  };
};
#endif
