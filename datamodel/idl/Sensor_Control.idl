#ifndef SENSOR_CONTROLDEFVAR
#define SENSOR_CONTROLDEFVAR
#include "Common_Types.idl"
#include "Shape_Model.idl"
#include "Coordinates_and_Positions.idl"


// Version 1.1
module org {


  module omg {


    module c4i {


      module Domain_Model {


        module Sensor_Domain {


          module Sensor_Control {



            // An index indicating a particular frequency channel or band. The actual
            // frequency is typically not of concern to the command team. A band refers to a
            // discrete frequency or a range of frequencies; such bands may overlap.
            typedef unsigned short frequency_band_type;
  




            // reported frequency state
            struct reported_frequency_state_type
            {
            	// Indicates whether the CMS is enabling or disabling a transmission frequency.
            	boolean enable;
            	// A unique identifier for the transmission frequency.
            	frequency_band_type frequency_id;
            	// Indicates whether a transmission frequency is available or not available.
            	boolean available;
            };
  




            // A sequence type, to represent multiple values. Note: variable length sequence.
            typedef sequence<reported_frequency_state_type> all_frequencies_state_reported_frequencies_type;
  




            // This struct contains zero to many "available" or "not available" frequencies
            // which may be enabled/disabled by the CMS
            struct all_frequencies_state_type
            {
            	all_frequencies_state_reported_frequencies_type reported_frequencies;
            };
  




            // Emission state
            struct control_emission_state_type
            {
            	// Indicates whether the CMS is enabling or disabling the sensor emission state.
            	boolean emission_activated;
            };
  




            // This enumeration specifies the sectors reference systems.
            enum sector_reference_type
            {
            	// NORTH_RELATED
            	NORTH_RELATED,
            	// SHIP_RELATED
            	SHIP_RELATED
            };
  




            // State of frequency transmission
            struct transmission_frequency_state_type
            {
            	// Indicates whether the CMS is enabling or disabling a transmission frequency.
            	boolean enabled;
            	// A unique identifier for the transmission frequency.
            	frequency_band_type frequency_id;
            };
  




            // A sequence type, to represent multiple values. Note: variable length sequence.
            typedef sequence<transmission_frequency_state_type> selected_frequency_list_selected_frequencies_type;
  




            // This struct contains zero to many frequencies which may be enabled/disabled by
            // the CMS
            struct selected_frequency_list_type
            {
            	selected_frequency_list_selected_frequencies_type selected_frequencies;
            };
  




            // Test target with its scenario
            struct test_target_plus_scenario_type
            {
            	// A identifier for the test targets.
            	unsigned short test_target_id;
            	// This attribute defines:
            	//      - the target motion type, with the relevant motion parameters
            	//      - the target generation parameters, such as injection type (internal /
            	// external), attenuation law (constant / variable-with-range), doppler type (0 /
            	// PRF/2).
            	org::omg::c4i::Domain_Model::Common_Types::anonymous_blob_type test_target_parameter;
            };
  




            // This typedef is used to identify a specific test target scenario.
            typedef long test_target_scenario_id_type;
  




            // The scenario is defined by a number of targets distributed in a defined
            // area/volume and having the same common parameters.
            struct test_target_scenario_common_parameter_target_type
            {
            	// This indicates the common initial time of the targets.
            	org::omg::c4i::Domain_Model::Common_Types::time_type initial_time;
            	// This is the number of the test targets composing the scenario.
            	unsigned short number_of_test_target;
            	// Indicates whether the CMS is enabling or disabling the generation of a test
            	// target scenario.
            	boolean test_target_scenario_activated;
            	// A unique identifier for the test target scenario.
            	test_target_scenario_id_type test_target_scenario_id;
            	// This indicates the area/volume boundaries where the test targets are
            	// distributed.
            	org::omg::c4i::Domain_Model::Common_Types::Shape_Model::general_polar_volume_type volume_boundaries;
            	test_target_plus_scenario_type targets_parameter;
            };
  




            // Encapsulation of a test target (simulated target to enable technical testing of
            // a sensor)
            struct test_target_type
            {
            	// This attribute defines the relevant initial time.
            	org::omg::c4i::Domain_Model::Common_Types::time_type initial_time;
            	// This attribute defines the initial target position.
            	org::omg::c4i::Domain_Model::Common_Types::Coordinates_and_Positions::wgs84_position_type position;
            	// A identifier for the test targets.
            	unsigned short test_target_id;
            	// This attribute defines:
            	//      - the target motion type, with the relevant motion parameters
            	//      - the target generation parameters, such as injection type (internal /
            	// external), attenuation law (constant / variable-with-range), doppler type (0 /
            	// PRF/2).
            	org::omg::c4i::Domain_Model::Common_Types::anonymous_blob_type test_target_parameter;
            };
  




            // A sequence type, to represent multiple values. Note: variable length sequence.
            typedef sequence<test_target_type> test_target_scenario_independent_target_targets_type;
  




            // The scenario is defined by a number of independent targets, with each target
            // having own characteristic parameters.
            struct test_target_scenario_independent_target_type
            {
            	// This is the number of the test targets composing the scenario.
            	unsigned short number_of_test_target;
            	// Indicates whether the CMS is enabling or disabling the generation of a test
            	// target scenario.
            	boolean test_target_scenario_activated;
            	// A unique identifier for the test target scenario.
            	test_target_scenario_id_type test_target_scenario_id;
            	test_target_scenario_independent_target_targets_type targets;
            };
  




            // scenario state
            struct test_target_scenario_state_type
            {
            	// Indicates whether the CMS is enabling or disabling the execution of the test
            	// target scenario.
            	boolean test_target_scenario_activated;
            	// A unique identifier for the test target scenario.
            	test_target_scenario_id_type test_target_scenario_id;
            };
  




            // Switch enumeration type for union test_target_scenario_type
            enum test_target_scenario_switch_type
            {
            	// The test_target_scenario_type union contains a value of
            	// test_target_scenario_common_parameter_target_type
            	test_target_scenario_type_scenario_common_parameter_target_kind,
            	// The test_target_scenario_type union contains a value of
            	// test_target_scenario_independent_target_type
            	test_target_scenario_type_scenario_independent_target_kind
            };
  




            // Scenario for test targets
            union test_target_scenario_type switch (test_target_scenario_switch_type)
            {
            	// This case is used when a test target scenario is constituted by a number of
            	// targets distributed in a defined area/volume and having the same common
            	// parameters.
            	case test_target_scenario_type_scenario_common_parameter_target_kind : org::omg::c4i::Domain_Model::Sensor_Domain::Sensor_Control::test_target_scenario_common_parameter_target_type scenario_common_parameter_target;
            	// This case is used when a test target scenario is constituted by a number of
            	// independent targets.
            	case test_target_scenario_type_scenario_independent_target_kind : org::omg::c4i::Domain_Model::Sensor_Domain::Sensor_Control::test_target_scenario_independent_target_type scenario_independent_target;
            };
  




            // The mode
            enum transmission_frequency_mode_type
            {
            	// AUTOMATIC_FREQUENCY_SELECTION
            	AUTOMATIC_FREQUENCY_SELECTION,
            	// FIXED_FREQUENCY
            	FIXED_FREQUENCY,
            	// FREQUENCY_DIVERSITY
            	FREQUENCY_DIVERSITY,
            	// RANDOM_AGILITY
            	RANDOM_AGILITY
            };
  




            // This enumeration allows specification of a CMS commanded power level for a
            // sector.
            enum transmission_sector_power_level_type
            {
            	// FULL_RADIATE_POWER
            	FULL_RADIATE_POWER,
            	// INHIBIT
            	INHIBIT,
            	// REDUCED_RADIATE_POWER
            	REDUCED_RADIATE_POWER
            };
  




            // Sector for transmission
            struct transmission_sector_type
            {
            	// Indicates the transmission power level of the sector.
            	transmission_sector_power_level_type power_level_transmission;
            	// Indicates whether the CMS is enabling or disabling a transmission sector.
            	boolean sector_enabled;
            	// A unique identifier for the transmission sector.
            	short sector_id;
            	// This indicates the reference system of the transmission sector.
            	sector_reference_type sector_reference;
            	// Note that the azimuth dimension of the sector shape (polar volume) applies to
            	// the horizon plane (i.e. elevation=0)
            	org::omg::c4i::Domain_Model::Common_Types::Shape_Model::general_polar_volume_type sector_shape;
            	// Indicates the transmission mode used within the sector
            	transmission_frequency_mode_type transmision_mode;
            };
  




            // A sequence type, to represent multiple values. Note: variable length sequence.
            typedef sequence<transmission_sector_type> transmission_sector_set_sector_type;
  




            // This struct contains zero to many transmission sectors which must be set/reset
            // by the CMS.
            struct transmission_sector_set_type
            {
            	transmission_sector_set_sector_type sector;
            };
  



          };
        };
      };
    };
  };
};
#endif