#ifndef CONTROL_SIMULATIONDEFVAR
#define CONTROL_SIMULATIONDEFVAR
#include "Common_Types.idl"
#include "Requests.idl"
#include "Simulation_Support.idl"


// Version 1.1
module org {


  module omg {


    module c4i {


      module Service_Interfaces {


        module Subsystem_Services {


          module Simulation_Support {


            module Control_Simulation {



              // Topic type for operation sim_mode_status. This service controls the simulation
              // mode of a subsystem. This simulation mode is independent of the operational
              // mode of the subsystem. Simulation mode is either ON or OFF. “ON” has different
              // meanings for different kinds of subsystems. Effector type subsystems shall not
              // engage real targets but shall simulate the engagement instead. Sensor type
              // subsystems may be fed with simulated targets which shall be reported as plots
              // or tracks. In each case while in simulation mode “ON” the subsystem shall
              // strictly avoid any impact on the environment that could be the result if
              // simulation mode was “OFF”.
              // 
              //      The actor is the Combat Management System.
              // 
              //      Basic Flow – Control simulation mode
              // 
              //      Start event – command of simulation-mode
              // 
              //      The service is triggered by the actor. The actor commands the simulation
              // mode which may be one of the following:
              //      <ul>
              //      	<li>ON: This indicates that the subsystem shall operate in simulation
              // mode</li>
              //      	<li>OFF: This indicates that the subsystem shall stop operating in
              // simulation mode and that any current simulation shall be terminated</li>
              //      </ul>
              //      On occurrence of the trigger provision of subsystem-simulation-mode is
              // executed.
              // 
              //      Provision of subsystem-simulation-mode
              //      After receipt of the simulation mode from the actor the subsystem responds
              // with its subsystem simulation mode.
              //      The subsystem simulation mode may be one of the two:
              //      <ul>
              //      	<li>ON: This indicates that the subsystem is operating in simulation
              // mode</li>
              //      	<li>OFF: This indicates that the subsystem is not operating in simulation
              // mode </li>
              //      </ul>
              // 
              //      Basic Flow – Control Simulation (Start/Resume, Stop/Freeze)
              // 
              //      START/RESUME simulation scenario
              //      Only when in simulation mode ON:
              //      Upon provision of the START/RESUME command by the actor the simulation
              // scenario starts or is resumed after a previously issued FREEZE.
              // 
              //      STOP/FREEZE simulation scenario
              //      Only when in simulation mode ON:
              //      Upon provision of the STOP/FREEZE command by the actor the simulation
              // scenario stops or stays frozen.
              //      The service ends.
              // 
              //      Provision on initialization
              //      The simulation mode shall be provided by the actor after initialization of
              // the CMS.
              // 
              //      The flow of information relevant to subsystem simulation are the subject
              // of another service: Define simulation scenario.
              //      If simulation is stopped or frozen simulation time of the subsystem and
              // the actor shall be also stopped.
              //      The synchronization of simulation time may be performed using START/RESUME
              // command.. Receive the status and mode of simulation.
              struct sim_mode_status_type
              {
              	// Field for interface operation parameter request_id. 
              	org::omg::c4i::Domain_Model::Common_Types::Requests::request_id_type request_id;
              	// Field for interface operation parameter the_status. 
              	org::omg::c4i::Domain_Model::Subsystem_Domain::Simulation_Support::sim_mode_status_type the_status;
              // Indicates which subsystem published the data or is intended to read it as a subscriber
#ifdef DDS_XTYPES
              @Key org::omg::c4i::Domain_Model::Common_Types::subsystem_id_type subsystem_id;
#else
              org::omg::c4i::Domain_Model::Common_Types::subsystem_id_type subsystem_id;
#endif
              };
#pragma keylist sim_mode_status_type  subsystem_id
  




              // Topic type for operation start_resume_session. . This request  shall be
              // initiated on demand of the CMS. If the subsystem is in simulation mode it shall
              // start/resume its simulation session and acknowledges the request.
              struct start_resume_session_type
              {
              	// Field for interface operation parameter request_id. 
              	org::omg::c4i::Domain_Model::Common_Types::Requests::request_id_type request_id;
              // Indicates which subsystem published the data or is intended to read it as a subscriber
#ifdef DDS_XTYPES
              @Key org::omg::c4i::Domain_Model::Common_Types::subsystem_id_type subsystem_id;
#else
              org::omg::c4i::Domain_Model::Common_Types::subsystem_id_type subsystem_id;
#endif
              };
#pragma keylist start_resume_session_type  subsystem_id
  




              // Topic type for operation start_stop_sim_mode. . This request  shall be
              // initiated on demand of the CMS to activate/deactivate the simulation mode of
              // the subsystem. The subsystem needs to acknowledge the request.
              struct start_stop_sim_mode_type
              {
              	// Field for interface operation parameter request_id. 
              	org::omg::c4i::Domain_Model::Common_Types::Requests::request_id_type request_id;
              	// Field for interface operation parameter the_request. 
              	org::omg::c4i::Domain_Model::Subsystem_Domain::Simulation_Support::start_stop_sim_mode_request_type the_request;
              // Indicates which subsystem published the data or is intended to read it as a subscriber
#ifdef DDS_XTYPES
              @Key org::omg::c4i::Domain_Model::Common_Types::subsystem_id_type subsystem_id;
#else
              org::omg::c4i::Domain_Model::Common_Types::subsystem_id_type subsystem_id;
#endif
              };
#pragma keylist start_stop_sim_mode_type  subsystem_id
  




              // Topic type for operation stop_freeze_session. . This request  shall be
              // initiated on demand of the CMS. If the subsystem is in simulation mode and the
              // session state is running the subsystem needs to stop/freeze its session and
              // acknowledges the request.
              struct stop_freeze_session_type
              {
              	// Field for interface operation parameter request_id. 
              	org::omg::c4i::Domain_Model::Common_Types::Requests::request_id_type request_id;
              	// Field for interface operation parameter the_request. 
              	org::omg::c4i::Domain_Model::Subsystem_Domain::Simulation_Support::stop_freeze_session_request_type the_request;
              // Indicates which subsystem published the data or is intended to read it as a subscriber
#ifdef DDS_XTYPES
              @Key org::omg::c4i::Domain_Model::Common_Types::subsystem_id_type subsystem_id;
#else
              org::omg::c4i::Domain_Model::Common_Types::subsystem_id_type subsystem_id;
#endif
              };
#pragma keylist stop_freeze_session_type  subsystem_id
  



            };
          };
        };
      };
    };
  };
};
#endif